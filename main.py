import os
import re
import requests
from telegram import Update
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext
from bs4 import BeautifulSoup
from pytube import YouTube
from instaloader import Instaloader, Post
from TikTokApi import TikTokApi
from dotenv import load_dotenv
import logging

# C·∫•u h√¨nh logging
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

load_dotenv()
TELEGRAM_TOKEN = os.getenv('7527429868:AAGcBlm_obLae3TwWnPpDyzlcnhy9UYv6QA')

# Kh·ªüi t·∫°o th√†nh ph·∫ßn
L = Instaloader()
api = TikTokApi()

async def handle_message(update: Update, context: CallbackContext):
    user = update.effective_user
    chat_id = update.message.chat_id
    message_id = update.message.message_id
    url = update.message.text

    try:
        # Ki·ªÉm tra URL h·ª£p l·ªá
        if not re.match(r'^https?://(?:[-\w.]|(?:%[\da-fA-F]{2}))+', url):
            await update.message.reply_text("‚ùå Link kh√¥ng h·ª£p l·ªá!")
            return

        # X√°c ƒë·ªãnh n·ªÅn t·∫£ng v√† t·∫£i video
        if "tiktok" in url:
            filename = await download_tiktok(url)
        elif "facebook" in url:
            filename = await download_facebook(url)
        elif "youtube" in url or "youtu.be" in url:
            filename = await download_youtube(url)
        elif "instagram" in url:
            filename = await download_instagram(url)
        elif "twitter" in url or "x.com" in url:
            filename = await download_twitter(url)
        else:
            await update.message.reply_text("‚ö†Ô∏è N·ªÅn t·∫£ng ch∆∞a ƒë∆∞·ª£c h·ªó tr·ª£!")
            return

        # G·ª≠i video v·ªÅ
        await update.message.reply_video(video=open(filename, 'rb'))
        
        # Xo√° link ng∆∞·ªùi d√πng NGAY KHI G·ª¨I VIDEO TH√ÄNH C√îNG
        try:
            await context.bot.delete_message(chat_id=chat_id, message_id=message_id)
            logger.info(f"ƒê√£ xo√° tin nh·∫Øn c·ªßa user {user.id}")
        except Exception as e:
            logger.error(f"L·ªói xo√° tin nh·∫Øn: {str(e)}")

        # D·ªçn d·∫πp file
        os.remove(filename)

    except Exception as e:
        error_msg = f"‚ùå L·ªói: {str(e)}"
        logger.error(error_msg)
        await update.message.reply_text(error_msg)

# ... (C√°c h√†m download_tiktok, download_facebook,... gi·ªØ nguy√™n nh∆∞ code tr∆∞·ªõc) ...

async def start(update: Update, context: CallbackContext):
    await update.message.reply_text(
        "üñêÔ∏è Ch√†o b·∫°n! G·ª≠i link video t·ª´:\n"
        "- TikTok/Douyin\n- Facebook\n- YouTube/Shorts\n- Instagram\n- Twitter/X\n"
        "v√† t√¥i s·∫Ω t·∫£i xu·ªëng gi√∫p b·∫°n!\n\n"
        "‚ö†Ô∏è Link c·ªßa b·∫°n s·∫Ω ƒë∆∞·ª£c t·ª± ƒë·ªông xo√° sau khi t·∫£i xong!"
    )

def main():
    updater = Updater(TELEGRAM_TOKEN)
    dp = updater.dispatcher

    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_message))

    logger.info("ü§ñ Bot ƒëang ch·∫°y...")
    updater.start_polling()
    updater.idle()

if __name__ == "__main__":
    main()